// TC_DD_P1_資料分配模組_1.2.5_Gemini

// DD_P1_Test_code.gs

// 模組名稱前綴，避免命名衝突
const TC_DD_MODULE_PREFIX = 'DD_';

// 定義測試用的科目代碼表名稱
const TC_DD_SUBJECT_CODE_SHEET_NAME = '997. 科目代碼_測試'; // 修改為實際工作表名稱
// 定義測試用的錯誤日誌表名稱
const TC_DD_ERROR_LOG_SHEET_NAME = 'ErrorLogs_Test';
// Google Sheets ID
const TC_DD_GOOGLE_SHEET_ID = '1TSn-X-8B_PDUseZZPbbc0AhK55E80DBXJqkPRtStOUY'; // 使用您提供的 Google Sheet ID
const TC_DD_LOGS_SHEET_NAME = 'Logs'; // 新增日誌工作表名稱

// 2. 模擬目標模組的處理函數
// 2.1 模擬處理記帳模組 (BK) 的函數
/**
 * @function DD_processForBK
 * @description 模擬處理記帳模組 (BK) 的函數。
 * @param {object} data - 要處理的數據。
 * @version 1_1_2
 */
let mockProcessForBK_called = false;
let mockProcessForBK_data = null;
function DD_processForBK(data) {
  mockProcessForBK_called = true;
  mockProcessForBK_data = data;
}

// 3. 從 Google Sheets 讀取科目代碼表
/**
 * @function DD_getSubjectCodeTable
 * @description 從 Google Sheets 工作表讀取科目代碼表。
 * @returns {Array<object>} - 科目代碼表 (JavaScript Object)。
 * @version 1.2.5
 */
function DD_getSubjectCodeTable() {
  try {
    const startTime = new Date().getTime(); // 記錄開始時間
    const sheet = SpreadsheetApp.openById(TC_DD_GOOGLE_SHEET_ID).getSheetByName(TC_DD_SUBJECT_CODE_SHEET_NAME);
    if (!sheet) {
      console.error(`DD_getSubjectCodeTable: 找不到工作表: ${TC_DD_SUBJECT_CODE_SHEET_NAME}`);
      return [];
    }
    const data = sheet.getDataRange().getValues();
    if (!data || data.length === 0) {
      console.error(`DD_getSubjectCodeTable: 工作表 ${TC_DD_SUBJECT_CODE_SHEET_NAME} 中沒有資料`);
      return [];
    }
    const endTime = new Date().getTime(); // 記錄結束時間
    console.log(`DD_getSubjectCodeTable: 讀取資料耗時: ${endTime - startTime} ms, 資料量: ${data.length}`);
    console.log('DD_getSubjectCodeTable: 讀取的原始資料:', data); // 輸出原始資料
    return data; // 直接返回原始資料
  } catch (e) {
    console.error(`DD_getSubjectCodeTable 發生錯誤: ${e.message}`);
    return [];
  }
}

// 4. 模擬 Google Sheet 存取科目代碼表
/**
 * @function DD_mockGetSheetByName
 * @description 模擬 Google Sheet 的 getSheetByName 函數，根據工作表名稱回傳模擬的工作表物件。
 * @param {string} sheetName - 要模擬的工作表名稱。
 * @returns {object|null} - 模擬的工作表物件，如果找不到指定的工作表則回傳 null。
 * @version 1_1_2
 */
function DD_mockGetSheetByName(sheetName) {
  if (sheetName === TC_DD_SUBJECT_CODE_SHEET_NAME) {
    // 使用實際的 Google Sheet 存取
    const ss = SpreadsheetApp.openById(TC_DD_GOOGLE_SHEET_ID); // 使用您提供的 Google Sheet ID
    const sheet = ss.getSheetByName(TC_DD_SUBJECT_CODE_SHEET_NAME);
    return {
      getLastRow: () => sheet.getLastRow(),
      getRange: (row, col, numRows, numCols) => sheet.getRange(row, col, numRows, numCols),
      appendRow: (rowArray) => sheet.appendRow(rowArray),
    };
  }
  if (sheetName === TC_DD_ERROR_LOG_SHEET_NAME) {
    return {
      appendRow: (rowArray) => {
        try {
          const sheet = SpreadsheetApp.openById(TC_DD_GOOGLE_SHEET_ID).getSheetByName(TC_DD_ERROR_LOG_SHEET_NAME);
          sheet.appendRow(rowArray);
        } catch (e) {
          console.error(`TC_DD_logError_mock: 記錄錯誤到 Google Sheets 失敗: ${e.message}, 原始錯誤: ${rowArray.join(', ')}`);
        }
      },
    };
  }
  if (sheetName === TC_DD_LOGS_SHEET_NAME) {
    return {
      appendRow: (rowArray) => {
        try {
          const sheet = SpreadsheetApp.openById(TC_DD_GOOGLE_SHEET_ID).getSheetByName(TC_DD_LOGS_SHEET_NAME);
          sheet.appendRow(rowArray);
        } catch (e) {
          console.error(`記錄日誌到 Google Sheets 失敗: ${e.message}, 原始訊息: ${rowArray.join(', ')}`);
          console.error(rowArray.join(', '));
        }
      },
    };
  }
  return null;
}
// 5. 模擬 SpreadsheetApp
const SpreadsheetApp = {
  getActiveSpreadsheet: () => ({
    getSheetByName: DD_mockGetSheetByName,
    insertSheet: (name) => DD_mockGetSheetByName(name) || { appendRow: (rowArray) => console.log(`DD_insertSheet_mock_${name}: ${rowArray.join(', ')}`) },
  }),
  openById: (id) => ({
    getSheetByName: (name) => SpreadsheetApp.getActiveSpreadsheet().getSheetByName(name),
  }),
};

// 6. 模擬錯誤日誌
let loggedErrors = [];
const TC_DD_logError = (errorMessage, data = null) => {
  loggedErrors.push({ message: errorMessage, data });
};
// 7. 模擬 data 的分類
/**
 * @function DD_classifyData
 * @description 模擬根據數據類型對數據進行分類。
 * @param {object} data - 要分類的數據。
 * @param {string} source - 數據來源
 * @returns {string} - 數據分類結果。
 * @version 1_1_2
 */
function DD_classifyData(data, source) {
  if (source === '使用者訊息') {
    return 'BK';
  }
  switch (data.type) {
    case '記帳':
      return 'BK';
    default:
      return 'default';
  }
}
// 8. 模擬分發資料
/**
 * @function DD_dispatchData
 * @description 模擬分發數據到不同的模組。
 * @param {object} data - 要分發的數據。
 * @param {string} targetModule - 目標模組的名稱。
 * @version 1_1_2
 */
function DD_dispatchData(data, targetModule) {
  try {
    switch (targetModule) {
      case 'BK':
        DD_processForBK(data);
        break;
      default:
        TC_DD_logError(`未知的目標模組: ${targetModule}`, data);
        break;
    }
  } catch (e) {
    TC_DD_logError(`DD_dispatchData 發生錯誤: ${e.message}`, data);
  }
}

// 9. 模擬處理科目名稱給 AI 學習 (保持不變)
// ... (DD_processSubjectNameForLearning) ...

// 10. 模擬取得科目代碼
/**
 * @function DD_getSubjectCode
 * @description 模擬取得科目代碼。
 * @param {string} subjectName - 要查詢的科目名稱。
 * @returns {object|null} - 科目代碼物件或 null。
 * @version 1_1_2
 */
function DD_getSubjectCode(subjectName, subjectCodeTable) {
  try {
    const foundSubject = subjectCodeTable.find((item) => item.name === subjectName) || subjectCodeTable.find((item) => item.synonyms.split(',').includes(subjectName));
    if (foundSubject) {
      return { subCode: foundSubject.code, synonyms: foundSubject.synonyms };
    } else {
      return null;
    }
  } catch (e) {
    TC_DD_logError(`DD_getSubjectCode 發生錯誤: ${e.message}`, { subjectName });
    return null;
  }
}

// 12. 模擬自動學習科目同義詞
/**
 * @function DD_learnSubjectSynonym
 * @description 模擬自動學習科目同義詞。
 * @param {string} newSynonym - 新的同義詞。
 * @param {string} subjectName - 要學習的科目名稱。
 * @version 1_1_2
 */
function DD_learnSubjectSynonym(newSynonym, subjectName, subjectCodeTable) {
  try {
    // 使用傳入的科目代碼表，而不是重新從 Google Sheets 讀取
    const subjectRow = subjectCodeTable.find((item) => item.name === subjectName);
    if (!subjectRow) { // 如果找不到科目代碼
      TC_DD_logError(`找不到指定代碼, 無法學習同義詞 ${newSynonym} -> ${subjectName}`, { newSynonym, subjectName });
      return; // 直接返回，不執行後續操作
    }
    const rowIndex = subjectCodeTable.indexOf(subjectRow) + 2; // +2 因為 data.indexOf 從 0 開始，且要加上標題列
    const currentSynonyms = subjectRow.synonyms || ''; // 第五欄：同義詞
    if (!currentSynonyms.split(',').includes(newSynonym)) {
      const updatedSynonyms = currentSynonyms ? `${currentSynonyms},${newSynonym}` : newSynonym;
      const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(TC_DD_SUBJECT_CODE_SHEET_NAME);
      sheet.getRange(rowIndex, 5).setValue(updatedSynonyms); // 第五欄：同義詞
    }
  } catch (e) {
    TC_DD_logError(`DD_learnSubjectSynonym 發生錯誤: ${e.message}`, { newSynonym, subjectName });
  }
}

// 13. 測試函數 - 根據測試計畫執行測試案例
/**
 * @function DD_runTests
 * @description 根據測試計畫執行測試案例，並輸出測試結果和總結 (適用於 GAS)。
 * @version 1.2.5
 */
function DD_runTests() {
  const testResults = [];
  let totalTests = 0;
  let passedTests = 0;
  let failedTests = 0;
  const subjectCodeTable = DD_getSubjectCodeTable(); // 在此快取科目代碼表

  // TC-001 測試數據分類 - 記帳類別
  testResults.push({ testCase: 'TC-001 測試數據分類 - 記帳類別', result: DD_classifyData({ type: '記帳', amount: 100 }, 'Rich menu') === 'BK' ? '通過' : '未通過' });
  // TC-006 測試數據分類 - 未知類別
  testResults.push({ testCase: 'TC-006 測試數據分類 - 未知類別', result: DD_classifyData({ type: '未知', data: '一些數據' }, 'Rich menu') === 'default' ? '通過' : '未通過' });
  // TC-007 測試數據分發 - 分發到 BK 模組
  mockProcessForBK_called = false;
  DD_dispatchData({ type: '記帳', amount: 100 }, 'BK');
  testResults.push({ testCase: 'TC-007 測試數據分發 - 分發到 BK 模組', result: mockProcessForBK_called ? '通過' : '未通過' });
  // TC-012 測試數據分發 - 未知目標模組
  loggedErrors = [];
  DD_dispatchData({ type: '特殊', data: '一些特殊數據' }, 'SPECIAL');
  testResults.push({ testCase: 'TC-012 測試數據分發 - 未知目標模組', result: loggedErrors.some((error) => error.message.includes('未知的目標模組: SPECIAL')) ? '通過' : '未通過' });
  // TC-013 測試錯誤處理 - DD_distributeData 內部錯誤 (模擬 DD_classifyData 拋出錯誤)
  const originalClassify = DD_classifyData;
  DD_classifyData = () => {
    throw new Error('分類錯誤');
  };
  loggedErrors = [];
  try {
    DD_distributeData({ type: '錯誤', data: '觸發錯誤' }, 'test');
  } catch (e) {
    // 捕獲預期中的錯誤，不影響測試流程
  }
  DD_classifyData = originalClassify; // 恢復原始函數
  testResults.push({ testCase: 'TC-013 測試錯誤處理 - DD_distributeData 內部錯誤', result: loggedErrors.some((error) => error.message.includes('處理數據時發生錯誤') && error.message.includes('分類錯誤')) ? '通過' : '未通過' });
  // TC-014 測試科目名稱提取 (模擬 - Rich menu 指令)
  testResults.push({ testCase: 'TC-014 測試科目名稱提取 (模擬 - Rich menu 指令)', result: DD_processSubjectNameForLearning('薪資') ? '通過' : '未通過' });
  // TC-015 測試科目名稱提取 (模擬 - 使用者 message)
  testResults.push({ testCase: 'TC-015 測試科目名稱提取 (模擬 - 使用者 message)', result: DD_processSubjectNameForLearning('伙食費') ? '通過' : '未通過' });
  // TC-016 測試同義詞學習觸發 - 科目名稱未找到
  loggedErrors = [];
  DD_processSubjectNameForLearning('宇宙能量');
  testResults.push({ testCase: 'TC-016 測試同義詞學習觸發 - 科目名稱未找到', result: loggedErrors.some((error) => error.message.includes('需要學習的科目名稱: "宇宙能量"')) ? '通過' : '未通過' });
  // TC-017 測試科目代碼查詢 - 找到直接匹配的科目名稱
  testResults.push({ testCase: 'TC-017 測試科目代碼查詢 - 找到直接匹配的科目名稱', result: DD_getSubjectCode('薪資', subjectCodeTable)?.subCode === '80101' ? '通過' : '未通過' });
  // TC-018 測試科目代碼查詢 - 找到同義詞匹配的科目名稱
  const subjectCode18 = DD_getSubjectCode('伙食費', subjectCodeTable);
  testResults.push({ testCase: 'TC-018 測試科目代碼查詢 - 找到同義詞匹配的科目名稱', result: subjectCode18 && subjectCode18.subCode === '10300' ? '通過' : '未通過' });
  // TC-019 測試科目代碼查詢 - 科目名稱未找到
  testResults.push({ testCase: 'TC-019 測試科目代碼查詢 - 科目名稱未找到', result: DD_getSubjectCode('宇宙能量', subjectCodeTable) === null ? '通過' : '未通過' });
  // TC-021 測試自動學習同義詞 - 新增同義詞
  DD_learnSubjectSynonym('飲料費', '薪資', subjectCodeTable);
  testResults.push({ testCase: 'TC-021 測試自動學習同義詞 - 新增同義詞', result: DD_getSubjectCode('薪資', subjectCodeTable)?.synonyms?.includes('飲料費') ? '通過' : '未通過' });
  // TC-022 測試自動學習同義詞 - 同義詞已存在
  const synonymsBefore22 = DD_getSubjectCode('薪資', subjectCodeTable)?.synonyms;
  DD_learnSubjectSynonym('伙食費', '薪資', subjectCodeTable);
  testResults.push({ testCase: 'TC-022 測試自動學習同義詞 - 同義詞已存在', result: DD_getSubjectCode('薪資', subjectCodeTable)?.synonyms === synonymsBefore22 ? '通過' : '未通過' });
  // TC-023 測試自動學習同義詞 - 科目名稱與主要名稱相同
  const synonymsBefore23 = DD_getSubjectCode('薪資', subjectCodeTable)?.synonyms;
  DD_learnSubjectSynonym('薪資', '薪資', subjectCodeTable);
  testResults.push({ testCase: 'TC-023 測試自動學習同義詞 - 科目名稱與主要名稱相同', result: DD_getSubjectCode('薪資', subjectCodeTable)?.synonyms === synonymsBefore23 ? '通過' : '未通過' });
  // TC-024 測試自動學習同義詞 - 找不到指定代碼
  const initialTableLength24 = subjectCodeTable.length;
  DD_learnSubjectSynonym('其他費用', '宇宙能量', subjectCodeTable);
  testResults.push({ testCase: 'TC-024 測試自動學習同義詞 - 找不到指定代碼', result: subjectCodeTable.length === initialTableLength24 ? '通過' : '未通過' });

  // 統計測試結果
  totalTests = testResults.length;
  passedTests = testResults.filter((result) => result.result === '通過').length;
  failedTests = totalTests - passedTests;

  // 輸出測試總結
  console.log('\n測試總結:');
  testResults.forEach((result) => console.log(`${result.testCase}: ${result.result}`));
  console.log(`\n--- 測試統計 ---`);
  console.log(`總測試案例: ${totalTests}`);
  console.log(`通過案例: ${passedTests}`);
  console.log(`未通過案例: ${failedTests}`);
}

// 測試 Google Sheets API 基本功能
function testGoogleSheetsAPI() {
  try {
    const sheet = SpreadsheetApp.openById(TC_DD_GOOGLE_SHEET_ID).getSheetByName(TC_DD_SUBJECT_CODE_SHEET_NAME);
    const cellValue = sheet.getRange(1, 1).getValue(); // 讀取第一個單元格的值
    console.log('第一個單元格的值:', cellValue);
  } catch (e) {
    console.error(`測試 Google Sheets API 發生錯誤: ${e.message}`);
  }
}

// 9. 測試函數入口
function DD_runTestPlan() {
  DD_runTests();
  testGoogleSheetsAPI(); // 執行 Google Sheets API 基本功能測試
}
