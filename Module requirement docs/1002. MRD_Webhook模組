Webhook 模組需求文件（MRD) v 1.6

1.0 模組概述（Module Overview）

Webhook 模組的主要用途是接收來自 LINE Messaging API 的 Webhook 事件，並將這些事件轉發至記帳處理模組進行解析與記錄。

該模組負責以下功能：

接收 Webhook 事件：即時監聽並處理 LINE 用戶的輸入訊息。

驗證請求：確保數據來源為 LINE，防止惡意攻擊。

解析訊息內容：從用戶輸入中擷取關鍵資訊，例如科目名稱與金額。

轉發處理請求：將結構化數據傳送至記帳處理模組進行記錄或學習新同義詞。


Webhook 模組是記帳流程的觸發點，確保用戶輸入能即時且準確地轉化為記帳數據，並支援動態學習用戶習慣的詞彙。


---

2.0 功能需求（Functional Requirements）

2.1 接收 Webhook 事件

監聽來自 LINE Messaging API 的 Webhook 事件，處理訊息類型的請求。


2.2 驗證 Webhook 請求

驗證請求的合法性，確保來源為 LINE，防止惡意請求。


2.3 訊息解析與轉發

從用戶輸入的訊息中解析出金額與科目名稱。

如果科目名稱可直接對應科目代碼，則將數據轉發至記帳處理模組。

如果科目名稱無法對應，則提供科目選單讓用戶選擇，並將學習結果存入科目代碼表。


2.4 學習新同義詞

如果用戶最終選擇了正確科目，則將其原始輸入存入科目代碼表的同義詞欄位，供未來匹配使用。


2.5 回應 LINE API

處理完成後，向 LINE API 回應 200 OK，確保請求順利執行。


---

3.0 資料欄位

Webhook 模組處理的主要欄位包括：

event_type：事件類型，例如 message。

user_id：LINE 用戶的 ID。

timestamp：訊息的時間戳記。

original_text：用戶輸入的原始內容，例如「中餐 120」。

amount：解析出的金額，例如 120。

subject_code：解析出的科目代碼，例如 10302（午餐）。

subject_name：解析出的科目名稱，例如「午餐」。


---

4.0 輸入/輸出規格（Input & Output Specifications）

4.1 Webhook 請求（輸入）
Webhook 模組會接收來自 LINE Messaging API 的請求，範例如下：

{
  "event_type": "message",
  "user_id": "U1234567890",
  "timestamp": "2025-03-27T12:34:56Z",
  "message": "中餐 120"
}

4.2 記帳請求（輸出）
當用戶輸入能夠直接匹配到科目代碼時，Webhook 模組會傳送標準記帳數據給記帳處理模組，範例如下：

{
  "event_type": "message",
  "user_id": "U1234567890",
  "timestamp": "2025-03-27T12:34:56Z",
  "original_text": "中餐 120",
  "amount": 120,
  "subject_code": "10302",
  "subject_name": "午餐",
  "source": "LINE"
}

4.3 同義詞學習請求（輸出）
當用戶輸入的詞無法匹配科目，最終透過選單選擇科目後，Webhook 模組會傳送新同義詞資訊給記帳處理模組，範例如下：

{
  "event_type": "synonym_learning",
  "user_id": "U1234567890",
  "timestamp": "2025-03-27T12:35:10Z",
  "user_input": "中餐",
  "subject_code": "10302",
  "subject_name": "午餐"
}


---

5.0 錯誤處理與例外狀況（Error Handling & Edge Cases）

Webhook 模組應處理以下錯誤情況：

無效請求：若請求來源非 LINE API，則回應 403 Forbidden，並記錄錯誤日誌。

數據解析錯誤：若無法從訊息中提取金額或科目，則回應 400 Bad Request，並要求用戶重新輸入。

記帳處理模組無回應：若記帳處理模組發生錯誤，則記錄錯誤並重試傳送請求（最多 3 次）。

---

6.0 測試計畫（Test Plan）

Webhook 模組的測試項目包括：

1. Webhook 事件接收：測試 Webhook 是否能成功接收來自 LINE API 的事件。


2. 請求驗證：測試是否能阻擋非 LINE API 來源的非法請求。


3. 訊息解析：測試不同類型的輸入格式，如「午餐 150」或「外賣便當 200」，確保能正確解析金額與科目名稱。


4. 記帳請求傳遞：測試解析後的數據是否正確傳遞至記帳處理模組。


5. 同義詞學習：測試當用戶輸入詞彙無法匹配科目時，系統是否提供選單，並成功記錄新同義詞。


6. 異常狀況處理：測試記帳處理模組當機時的錯誤處理機制，確保系統能記錄錯誤並重試請求。




