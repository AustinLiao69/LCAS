/**
 * Webhook處理模組
 * 版本: 1.0.0
 * 作者: AustinLiao69
 */

// 1. 定義全域變數
var sheetName = "Webhook事件記錄";
var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

// 2. 接收Webhook事件
function doPost(e) {
  console.log("Debug: 進入函數 doPost_1_0_0_AustinLiao69");
  
  // 1. 解析請求
  var requestData = JSON.parse(e.postData.contents);
  console.log("Debug: 接收到的數據: ", requestData);
  
  // 2. 驗證請求
  if (!驗證Webhook請求_1_0_0_AustinLiao69(requestData)) {
    return ContentService.createTextOutput(JSON.stringify({status: "error", message: "驗證失敗"}));
  }
  
  // 3. 處理數據
  處理Webhook數據_1_0_0_AustinLiao69(requestData);
  
  return ContentService.createTextOutput(JSON.stringify({status: "success"}));
}

// 3. 驗證Webhook請求
function 驗證Webhook請求_1_0_0_AustinLiao69(requestData) {
  console.log("Debug: 進入函數 驗證Webhook請求_1_0_0_AustinLiao69");
  
  // 假設我們有一個預共享密鑰來驗證請求
  var sharedSecret = "your_shared_secret";
  
  // 簡單的驗證邏輯
  if (requestData.secret !== sharedSecret) {
    console.error("Debug: 驗證失敗，密鑰不匹配");
    return false;
  }
  
  console.log("Debug: 驗證成功");
  return true;
}

// 4. 處理Webhook數據
function 處理Webhook數據_1_0_0_AustinLiao69(requestData) {
  console.log("Debug: 進入函數 處理Webhook數據_1_0_0_AustinLiao69");
  
  var sheet = spreadsheet.getSheetByName(sheetName);
  sheet.appendRow([new Date(), requestData.eventType, JSON.stringify(requestData.payload)]);
  console.log("Debug: Webhook數據已處理並儲存");
}

// 5. 錯誤處理與重試機制
function 重試機制_1_0_0_AustinLiao69(requestData) {
  console.log("Debug: 進入函數 重試機制_1_0_0_AustinLiao69");
  
  // 簡單的重試邏輯示例
  var maxRetries = 3;
  for (var i = 0; i < maxRetries; i++) {
    try {
      處理Webhook數據_1_0_0_AustinLiao69(requestData);
      console.log("Debug: 重試成功");
      break;
    } catch (error) {
      console.error("Debug: 重試失敗，次數: ", i + 1, " 錯誤: ", error);
    }
  }
}
