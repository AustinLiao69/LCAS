// WH_Webhook 模組_v1_2_2_Claude

// 1. 配置參數
const WH_CONFIG = {
  DEBUG: true,
  SHEET: {
    ID: "1TSn-X-8B_PDUseZZPbbc0AhK55E80DBXJqkPRtStOUY",
    NAME: "Master Ledger_v1.0_20250327"
  },
  LINE: {
    CHANNEL_SECRET: "e137bf2f264e9b6b80f46350fb1605b6"
  },
  RETRY: {
    MAX_COUNT: 3,
    DELAY_MS: 1000
  }
};

// 2. 初始函數
function WH_doPost(e) {
  WH_logDebug("收到 Webhook 請求");
  
  try {
    if (!WH_validateRequestStructure(e)) {
      return WH_createErrorResponse("無效的請求格式", 400);
    }

    const postData = JSON.parse(e.postData.contents);
    
    if (!WH_validateRequest(e)) {
      return WH_createErrorResponse("無效的請求來源", 403);
    }

    const responses = postData.events.map(event => WH_processEvent(event));
    return WH_handleResponses(responses);
  } catch (error) {
    WH_logDebug("請求處理錯誤: " + error.toString());
    return WH_createErrorResponse("請求處理失敗: " + error.message, 500);
  }
}

// 3. 請求結構驗證
function WH_validateRequestStructure(e) {
  return e && e.postData && e.postData.contents;
}

// 4. LINE 簽章驗證
function WH_validateRequest(e) {
  const signature = e.headers["X-Line-Signature"];
  
  if (!signature) {
    WH_logDebug("缺少 LINE 簽章");
    return false;
  }
  
  const payload = e.postData.contents;
  if (!payload) {
    WH_logDebug("缺少請求內容");
    return false;
  }
  
  try {
    const hash = Utilities.computeHmacSha256Signature(payload, WH_CONFIG.LINE.CHANNEL_SECRET);
    const base64Hash = Utilities.base64Encode(hash);
    return signature === base64Hash;
  } catch (error) {
    WH_logDebug("簽章驗證錯誤: " + error.toString());
    return false;
  }
}

// 5. 事件處理主函數
function WH_processEvent(event) {
  try {
    if (!WH_validateEventStructure(event)) {
      return { error: "無效的事件結構", responseCode: 400 };
    }

    switch(event.type) {
      case 'message':
        return WH_processMessageEvent(event);
      default:
        return { error: "不支援的事件類型", responseCode: 400 };
    }
  } catch (error) {
    WH_logDebug("事件處理錯誤: " + error.toString());
    return { error: "內部伺服器錯誤", responseCode: 500 };
  }
}

// 6. 事件結構驗證
function WH_validateEventStructure(event) {
  return (
    event &&
    event.type &&
    event.timestamp &&
    !isNaN(new Date(event.timestamp))
  );
}

// 7. 訊息事件處理
function WH_processMessageEvent(event) {
  if (!event.message || !event.message.text) {
    return { error: "不支援的訊息類型", responseCode: 400 };
  }

  const ddData = {
    event_type: "message",
    user_id: event.source.userId,
    timestamp: new Date(event.timestamp).toISOString(),
    original_text: event.message.text,
    source: "LINE"
  };

  return WH_forwardToDDModule(ddData);
}

// 8. 轉發至 DD 模組
function WH_forwardToDDModule(data) {
  for (let attempt = 1; attempt <= WH_CONFIG.RETRY.MAX_COUNT; attempt++) {
    try {
      // 呼叫 DD 模組的處理函數
      const response = DD_processData(data);  // 假設 DD 模組提供了這個函數
      return { success: true, responseCode: 200 };
    } catch (error) {
      WH_logDebug(`DD 模組處理失敗 (嘗試 ${attempt}/${WH_CONFIG.RETRY.MAX_COUNT}): ${error.toString()}`);
      if (attempt === WH_CONFIG.RETRY.MAX_COUNT) {
        return { error: "DD 模組處理失敗", responseCode: 500 };
      }
      Utilities.sleep(WH_CONFIG.RETRY.DELAY_MS * attempt);
    }
  }
}

// 9. 回應處理
function WH_handleResponses(responses) {
  if (!Array.isArray(responses) || responses.length === 0) {
    return WH_createErrorResponse("沒有事件需要處理", 400);
  }

  const errorResponse = responses.find(r => r.error);
  if (errorResponse) {
    return WH_createErrorResponse(errorResponse.error, errorResponse.responseCode);
  }

  return WH_createSuccessResponse({
    processed: responses.length,
    success: responses.filter(r => r.success).length
  });
}

// 10. 回應生成函數
function WH_createErrorResponse(error, code) {
  return ContentService.createTextOutput(JSON.stringify({
    error: error,
    timestamp: new Date().toISOString()
  }))
  .setMimeType(ContentService.MimeType.JSON)
  .setResponseCode(code);
}

function WH_createSuccessResponse(data = {}) {
  return ContentService.createTextOutput(JSON.stringify({
    success: true,
    ...data
  }))
  .setMimeType(ContentService.MimeType.JSON);
}

// 11. 日誌記錄
function WH_logDebug(message) {
  if (WH_CONFIG.DEBUG) {
    Logger.log(message);
    WH_writeToLogSheet(message);
  }
}

// 12. 日誌寫入試算表
function WH_writeToLogSheet(message) {
  try {
    const spreadsheet = SpreadsheetApp.openById(WH_CONFIG.SHEET.ID);
    const logSheet = spreadsheet.getSheetByName("Logs") || WH_createLogSheet();
    logSheet.appendRow([new Date(), message]);
  } catch (error) {
    Logger.log("寫入日誌失敗: " + error.toString());
  }
}

// 13. 建立日誌工作表
function WH_createLogSheet() {
  const spreadsheet = SpreadsheetApp.openById(WH_CONFIG.SHEET.ID);
  const logSheet = spreadsheet.insertSheet("Logs");
  logSheet.getRange("A1:B1").setValues([["時間", "訊息"]]);
  return logSheet;
}
