TP_WH_v1.5
1. 測試範圍
本測試計畫針對 Webhook 模組（WH）進行單元測試，確保其核心功能正常運作，包含：

1.1 基本功能測試
接收 Webhook 事件：測試 WH 是否能正確接收來自 LINE Messaging API 的 Webhook 事件。
請求驗證：確保 WH 只接受來自 LINE API 的合法請求，並拒絕無效請求。
訊息轉發至資料分配模組（DD）：確保 WH 能正確封裝並轉發訊息給 DD。
錯誤處理機制：測試 WH 在 DD 無回應或數據解析錯誤時的行為。
回應 LINE API：確保 WH 能正確回應 200 OK，並在錯誤發生時回應適當的 HTTP 狀態碼。

1.2 擴展功能測試
日誌記錄功能：測試 WH 的日誌記錄是否正確寫入試算表。（注意：測試程式碼中未直接測試此功能，但在測試執行中會觀察）
重試機制：測試 WH_CONFIG.RETRY 相關設定是否正確運作。（已在 TC-006 中涵蓋）
資源使用：測試在 GAS 環境下的資源使用情況。（測試程式碼中未直接測試）

2. 測試案例（Test Cases） 
TC-001 測試 Webhook 事件接收
測試目標：驗證 WH 是否能接收格式正確的 LINE Webhook 事件並初步處理。
輸入值：符合 LINE Webhook 訊息事件格式的 JSON 物件。
驗證點：WH_doPost 函數是否返回 200 OK。
預期結果：WH_doPost 成功接收事件並回應 200 OK。

TC-002 測試請求驗證 - 使用完全錯誤的簽章
測試目標：驗證 WH 能拒絕使用完全錯誤簽章的請求。
輸入值：包含正確的 JSON payload 和一個完全錯誤的簽章的模擬事件物件。
驗證點：WH_doPost 函數是否返回 403 Forbidden。
預期結果：WH_doPost 回應 403 Forbidden。

TC-003 測試請求驗證 - 使用長度相同但內容不同的簽章
測試目標：驗證 WH 能拒絕使用長度相同但內容不同的簽章的請求。
輸入值：包含正確的 JSON payload 和一個長度相同但內容不同的簽章的模擬事件物件。
驗證點：WH_doPost 函數是否返回 403 Forbidden。
預期結果：WH_doPost 回應 403 Forbidden。

TC-004 測試請求驗證 - 使用部分篡改的簽章
測試目標：驗證 WH 能拒絕使用部分內容被篡改的簽章的請求。
輸入值：包含正確的 JSON payload 和一個部分內容被篡改的簽章的模擬事件物件。
驗證點：WH_doPost 函數是否返回 403 Forbidden。
預期結果：WH_doPost 回應 403 Forbidden。

TC-005 測試訊息轉發
測試目標：驗證 WH 在接收到有效訊息事件後，能成功調用 DD_processData 函數。
輸入值：符合 LINE Webhook 訊息事件格式的 JSON 物件。
驗證點：
WH_doPost 函數是否返回 200 OK。
（間接驗證）模擬的 DD_processData 函數是否被調用，並接收到包含事件相關資料的物件（透過 Logger.log 觀察）。
預期結果：WH_doPost 回應 200 OK，且 DD_processData 被調用並接收到正確的資料。

TC-006 測試 DD 無回應時的行為
測試目標：驗證當模擬的 DD_processData 拋出錯誤時，WH 是否會重試並最終返回 500 錯誤。
輸入值：符合 LINE Webhook 訊息事件格式的 JSON 物件。
驗證點：
WH_doPost 函數是否返回 500 Internal Server Error。
回應內容是否包含 "DD 模組處理失敗" 的訊息。
（間接驗證）觀察日誌中 DD_processData 是否被調用多次（根據 WH_CONFIG.RETRY.MAX_COUNT）。
預期結果：WH_doPost 在模擬 DD 失敗後回應 500，且回應內容包含錯誤訊息。

TC-007 測試解析錯誤 (無效事件結構)
測試目標：驗證當接收到包含無效事件結構的 payload 時，WH 能正確返回 400 Bad Request。
輸入值：包含 timestamp 格式錯誤的 LINE Webhook 事件 JSON。
驗證點：WH_doPost 函數是否返回 400 Bad Request，且回應內容包含 "無效的事件結構"。
預期結果：WH_doPost 回應 400 Bad Request 並包含錯誤訊息。

TC-008 測試解析錯誤 (格式錯誤 JSON)
測試目標：驗證當接收到格式錯誤的 JSON payload 時，WH 能正確返回 400 Bad Request。
輸入值：格式不完整的 JSON payload。
驗證點：WH_doPost 函數是否返回 400 Bad Request，且回應內容包含 "無效的請求格式"。
預期結果：WH_doPost 回應 400 Bad Request 並包含錯誤訊息。

TC-009 測試正常回應
測試目標：驗證 WH 在成功處理有效請求並成功轉發（模擬成功）後，返回 200 OK。
輸入值：符合 LINE Webhook 訊息事件格式的 JSON 物件。
驗證點：WH_doPost 函數是否返回 200 OK。
預期結果：WH_doPost 回應 200 OK。

TC-010 測試 LINE 訊息回覆機制
測試目標：跳過 - 目前測試程式碼和 WH 模組都不包含主動回覆 LINE 訊息的功能。
預期結果：測試被跳過。

TC-011 測試 LINE 回覆錯誤處理
測試目標：跳過 - 目前測試程式碼和 WH 模組都不包含主動回覆 LINE 訊息的功能。
預期結果：測試被跳過。

TC-012 測試多個事件
測試目標：驗證 WH 能處理包含多個事件的 LINE Webhook 請求。
輸入值：包含多個不同類型（message, follow）的 LINE Webhook 事件的 JSON 物件。
驗證點：WH_doPost 函數是否返回 200 OK。（更詳細的驗證需要檢查模擬的 DD_processData 是否被調用多次，並接收到每個事件的相關資料）
預期結果：WH_doPost 回應 200 OK，且每個事件都被處理（透過日誌觀察）。

TC-013 測試空事件列表
測試目標：驗證 WH 能處理包含空事件列表的 LINE Webhook 請求。
輸入值：包含一個空的 events 陣列的 JSON 物件。
驗證點：WH_doPost 函數是否返回 200 OK。
預期結果：WH_doPost 回應 200 OK。

3. 測試方法 
3.1 單元測試（Unit Test）
透過您提供的 WH_Testcode_1_4_7_gemini 腳本在 GAS 環境中執行測試。
腳本中模擬了 ContentService 和 DD_processData 函數，用於隔離測試 WH 模組的 doPost 函數。
測試腳本直接調用 WH_doPost 函數，並使用輔助函數 (WH_assertResponseCode, WH_assertResponseCodeAndContent) 驗證其輸出。
簽章驗證的測試透過 WH_createMockEvent 輔助函數建立包含不同簽章的模擬事件物件進行。
3.2 API 測試（API Testing）
目前主要透過單元測試進行模擬，未直接使用 UrlFetchApp 進行外部 API 請求的模擬。 如果需要更全面的 API 測試，可能需要額外編寫使用 UrlFetchApp 的測試案例。
3.3 錯誤測試（Error Handling Test）
測試案例 TC-006、TC-007 和 TC-008 專門用於測試 WH 模組在不同錯誤情境下的處理方式，包括 DD 處理失敗和輸入資料解析錯誤。

4. 測試環境設定 
4.1 GAS 環境
專案 ID：[您的專案 ID]
試算表 ID：1TSn-X-8B_PDUseZZPbbc0AhK55E80DBXJqkPRtStOUY
權限設定：編輯者權限
4.2 LINE 設定
Channel Secret：直接在 WH_TEST_CONFIG 中使用 (e137bf2f264e9b6b80f46350fb1605b6)
Webhook URL：在單元測試中不直接依賴實際的 Webhook URL，而是直接調用 WH_doPost 函數
4.3 測試工具
Google Apps Script 編輯器
Google Apps Script 內建的 Logger 和 console.log 用於記錄測試結果
4.4 LINE Reply API 設定
目前測試範圍不包含 LINE Reply API 的直接測試。

5. 測試執行步驟 
5.1 前置作業
將 WH_Testcode_1_4_7_gemini 腳本和被測試的 WH 模組程式碼放置在同一個 Google Apps Script 專案中。
確保 WH_CONFIG 中的 LINE.CHANNEL_SECRET 與 WH_TEST_CONFIG 中的 LINE_CHANNEL_SECRET 一致。
（可選）建立名為 "Logs" 的工作表，以便觀察 WH_writeToLogSheet 的行為（雖然測試腳本本身不直接驗證寫入）。
5.2 測試執行
在 GAS 編輯器中，執行 WH_runAllTests 函數。
查看 GAS 的「執行記錄」或「日誌」 (Logger.log 和 console.log 的輸出) 以獲取測試結果。
根據日誌中的 "通過" 或 "未通過" 標記判斷每個測試案例的結果。
檢查日誌中模擬的 DD_processData 的調用情況和接收到的數據。
5.3 清理作業
測試執行後，可以根據需要清理測試日誌。
6. 測試結果報告 (維持報告格式，內容根據執行結果填寫)

