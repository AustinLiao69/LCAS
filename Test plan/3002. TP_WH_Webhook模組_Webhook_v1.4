# TP_WH_v1.4

## 1. 測試範圍
本測試計畫針對 Webhook 模組（WH）進行單元測試，確保其核心功能正常運作，包含：

### 1.1 基本功能測試
- 接收 Webhook 事件：測試 WH 是否能正確接收來自 LINE Messaging API 的 Webhook 事件。
- 請求驗證：確保 WH 只接受來自 LINE API 的合法請求，並拒絕無效請求。
- 訊息轉發至資料分配模組（DD）：確保 WH 能正確封裝並轉發訊息給 DD。
- 錯誤處理機制：測試 WH 在 DD 無回應或數據解析錯誤時的行為。
- 回應 LINE API：確保 WH 能正確回應 200 OK，並在錯誤發生時回應適當的 HTTP 狀態碼。

### 1.2 擴展功能測試
- 日誌記錄功能：測試 WH 的日誌記錄是否正確寫入試算表。
- 重試機制：測試 WH_CONFIG.RETRY 相關設定是否正確運作。
- 資源使用：測試在 GAS 環境下的資源使用情況。

## 2. 測試案例（Test Cases）

### TC-001 測試 Webhook 事件接收
- 測試目標：WH 是否能接收來自 LINE Webhook 並解析數據。
- 輸入值：
  ```json
  {
    "events": [{
      "type": "message",
      "source": {"userId": "U1234567890"},
      "timestamp": 1617123456789,
      "message": {"type": "text", "text": "午餐 100"}
    }]
  }
  ```
- 驗證點：
  1. 請求結構完整性
  2. 時間戳記格式
  3. 使用者 ID 格式
  4. 訊息內容格式
- 預期結果：WH 成功解析 Webhook 事件。

### TC-002 測試請求驗證
- 測試目標：WH 是否能拒絕來自非 LINE API 的請求。
- 測試數據：
  1. 正確的 Channel Secret
  2. 錯誤的 Channel Secret
  3. 空的 Channel Secret
- 驗證點：
  1. WH_validateRequest 函數的回傳值
  2. 錯誤回應格式
- 預期結果：非 LINE 來源請求回應 403 Forbidden。

### TC-003 測試訊息轉發
- 測試目標：WH 是否能將解析後的訊息正確轉發給 DD。
- 測試數據：
  1. 一般文字訊息："午餐 100"
  2. 特殊字元訊息："午餐!@#$ 100"
  3. 空白訊息：" "
- 驗證點：
  1. WH_forwardToDDModule 的處理結果
  2. 轉發數據格式
- 預期結果：WH 成功轉發數據至 DD，並回應 200 OK。

### TC-004 測試 DD 無回應時的行為
- 測試目標：DD 無回應時 WH 是否會重試 3 次。
- 驗證點：
  1. 重試間隔時間（1000ms, 2000ms, 3000ms）
  2. 重試次數（3次）
  3. 錯誤訊息格式
- 預期結果：WH 在 3 次重試後記錄錯誤並回應 500。

### TC-005 測試解析錯誤
- 測試目標：當收到無效數據時，WH 是否能正確回應錯誤。
- 測試數據：
  1. 格式錯誤的 JSON
  2. 缺少必要欄位
  3. 欄位型別錯誤
- 預期結果：WH 回應 400 Bad Request。

### TC-006 測試正常回應
- 測試目標：WH 在成功處理請求後，是否能回應 LINE 200 OK。
- 驗證點：
  1. 回應格式
  2. 回應內容
  3. 回應狀態碼
- 預期結果：WH 正確回應 200 OK。

### TC-007 測試 LINE 訊息回覆機制
- 測試目標：驗證 WH 模組收到 LINE 訊息後的回覆機制
- 測試數據：
  1. 一般文字訊息：
  ```json
  {
    "events": [{
      "type": "message",
      "replyToken": "nHuyWiB7yP5Zw52FIkcQobQuGDXCTA",
      "source": {
        "userId": "U1234567890",
        "type": "user"
      },
      "timestamp": 1617123456789,
      "message": {
        "type": "text",
        "id": "325708",
        "text": "午餐 100"
      }
    }]
  }
  ```
  2. 包含 replyToken 的回覆：
  ```json
  {
    "replyToken": "nHuyWiB7yP5Zw52FIkcQobQuGDXCTA",
    "messages": [{
      "type": "text",
      "text": "已收到您的記帳：午餐 100元"
    }]
  }
  ```

- 驗證點：
  1. replyToken 的處理
  2. 回覆訊息的格式
  3. LINE Reply API 的呼叫
  4. 回覆訊息的內容確認

- 預期結果：
  1. WH 成功解析訊息並取得 replyToken
  2. 正確呼叫 LINE Reply API
  3. 使用者收到確認訊息
  4. 回應 200 OK

- 測試步驟：
  1. 發送模擬 LINE 訊息請求
  2. 確認 WH 模組接收訊息
  3. 驗證回覆訊息格式
  4. 確認使用者收到回覆
  5. 檢查錯誤處理機制

### TC-008 測試 LINE 回覆錯誤處理
- 測試目標：驗證回覆機制的錯誤處理
- 測試數據：
  1. 無效的 replyToken
  2. 過期的 replyToken（超過 30 秒）
  3. LINE API 暫時無法使用

- 驗證點：
  1. 錯誤處理機制
  2. 錯誤日誌記錄
  3. 系統穩定性

- 預期結果：
  1. 適當的錯誤處理
  2. 完整的錯誤日誌
  3. 系統繼續正常運作

## 3. 測試方法

### 3.1 單元測試（Unit Test）
- 透過模擬 LINE Webhook 事件，驗證 WH 各功能的正確性。
- 在 GAS 環境中執行測試。
- 驗證各個函數的獨立運作。

### 3.2 API 測試（API Testing）
- 使用 GAS 內建的 UrlFetchApp 服務模擬請求。
- 檢查 WH 的請求驗證、訊息轉發及回應狀態。

### 3.3 錯誤測試（Error Handling Test）
- 測試 WH 在無效數據、DD 無回應等異常情境下的處理方式。
- 驗證錯誤日誌記錄。

## 4. 測試環境設定

### 4.1 GAS 環境
- 專案 ID：[專案 ID]
- 試算表 ID：1TSn-X-8B_PDUseZZPbbc0AhK55E80DBXJqkPRtStOUY
- 權限設定：編輯者權限

### 4.2 LINE 設定
- Channel Secret：e137bf2f264e9b6b80f46350fb1605b6
- Webhook URL：[GAS Web App URL]

### 4.3 測試工具
- GAS 編輯器
- GAS 內建服務

### 4.4 LINE Reply API 設定
- Reply API Endpoint: https://api.line.me/v2/bot/message/reply
- Content-Type: application/json
- Authorization: Bearer {channel access token}

## 5. 測試執行步驟

### 5.1 前置作業
1. 確認 GAS 專案設定
   - 檢查專案權限
   - 確認試算表存取權限
   - 驗證 LINE Channel Secret 設定

2. 準備測試環境
   - 建立測試用試算表
   - 設定測試日誌工作表

### 5.2 測試執行
1. 依序執行各測試案例
2. 記錄測試結果
3. 檢查日誌記錄
4. 驗證測試結果

### 5.3 清理作業
1. 清理測試數據
2. 備份測試日誌
3. 回復初始設定

## 6. 測試結果報告

### 6.1 報告格式
- 測試案例 ID
- 執行時間
- 執行結果（通過/失敗）
- 錯誤訊息（如果有）
- 效能數據
- 建議事項

### 6.2 結果統計
- 總測試案例數
- 通過數量
- 失敗數量
- 效能指標

### 6.3 問題追蹤
- 問題描述
- 重現步驟
- 影響範圍
- 建議解決方案

## 7. 版本紀錄
- v1.4：新增 LINE 訊息回覆機制測試案例
- v1.3：新增完整測試環境設定與結果報告格式
- v1.2：更新測試案例與執行步驟
- v1.1：初始版本建立
